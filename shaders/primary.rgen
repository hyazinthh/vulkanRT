#version 460
#extension GL_NV_ray_tracing : require

layout(set = 0, binding = 0) uniform accelerationStructureNV scene;
layout(set = 0, binding = 1, rgba8) uniform image2D resultImage;

layout(set = 0, binding = 2) uniform RayTracingSettings {
    uint maxBounces;
    float tmax;
} rayTracingSettings;

layout(set = 0, binding = 3) uniform Camera {
    mat4 viewInverse;
    mat4 projInverse;
} camera;

struct RayPayload {
    vec4 color;
    int bounce;
};

layout(location = 0) rayPayloadNV RayPayload payload;

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 posNDC = pixelCenter / vec2(gl_LaunchSizeNV.xy);
    vec2 posClip = posNDC * 2.0 - 1.0;

    vec4 origin = camera.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = camera.projInverse * vec4(posClip.x, posClip.y, 1, 1);
    vec4 direction = camera.viewInverse * vec4(normalize(target.xyz), 0) ;

    const uint rayFlags = gl_RayFlagsOpaqueNV;
    const uint cullMask = 0xFF;
    const float tmin = 0.0f;
    const float tmax = rayTracingSettings.tmax;

    payload.bounce = 0;
    traceNV(scene, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

    imageStore(resultImage, ivec2(gl_LaunchIDNV.xy), payload.color);
}